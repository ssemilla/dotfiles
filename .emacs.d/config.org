* Intro
  This =.org= file will be translated to a =.el= file by =org-babel-load-file=.
  It is heavily inpired by [[https://www.youtube.com/channel/UCDEtZ7AKmwS0_GNJog01D2g][Uncle Dave]].

* My init.el file
   =init.el= file only contains initializing =package= and then loading =config.org=
   
*** Initialize =package=
    Add MELPA
#+BEGIN_SRC emacs-lisp :tangle no
  (require 'package)
  (setq package-enable-at-startup nil)
  (add-to-list 'package-archives
	       '("melpa" . "http://melpa.org/packages/"))
  (package-initialize)
#+END_SRC

*** Load =config.org=
    This line loads =config.org= by extracting the =emacs-lisp= snippets and compiling it to =config.el=.
#+BEGIN_SRC emacs-lisp :tangle no
  (org-babel-load-file (expand-file-name "~/.emacs.d/config.org"))
#+END_SRC

* Actual contents of config.org
  From this point on, the code snippets will be parsed into =config.el=

* Packages
  These are the packages that I use. I will update them when needed.
*** use-package
	This simplifies installing packages. See the preceding snippets for usage.
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
#+END_SRC

*** which-key
   This gives hints on the possible keys because I'm really forgetful.
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :init (which-key-mode))
#+END_SRC

*** solarized-theme
   I'm used to this theme, it looks like a blackboard.
#+BEGIN_SRC emacs-lisp
  (use-package solarized-theme
    :ensure t
    :init (load-theme 'solarized-dark t))
#+END_SRC

*** modes
   Additional modes
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t)
#+END_SRC

*** company

    Auto complete package.
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :bind (:map company-active-map
		("M-n" . nil)
		("M-p" . nil)
		("C-n" . #'company-select-next)
		("C-p" . #'company-select-previous)
		("SPACE" . #'company-abort))
    :config
    (setq company-idle-delay 3)
    (setq company-minimum-prefix 3)
    (global-company-mode))
  (global-set-key (kbd "C-.") 'company-complete)
#+END_SRC

*** avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
	:ensure t
	:config
	(global-set-key (kbd "C-:") 'avy-goto-char-2))
#+END_SRC
*** direx
#+BEGIN_SRC emacs-lisp
  (use-package direx
	:ensure t)

  (global-set-key (kbd "C-x C-j") 'direx:jump-to-directory)

  ;; dired
  (define-key dired-mode-map (kbd "RET") 'dired-find-alternate-file)
  (define-key dired-mode-map (kbd "^") (lambda () (interactive) (find-alternate-file "..")))

  (add-hook 'dired-mode-hook
			'dired-hide-details-mode)
#+END_SRC

*** dired-subtree
#+BEGIN_SRC emacs-lisp
  (use-package dired-subtree
	:ensure t)
#+END_SRC
*** treemacs
#+BEGIN_SRC emacs-lisp
  (use-package treemacs
	:ensure t
	:defer t
	:init
	(with-eval-after-load 'winum
	  (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
	:config
	(progn
	  (setq treemacs-collapse-dirs              (if (executable-find "python") 3 0)
			treemacs-deferred-git-apply-delay   0.5
			treemacs-display-in-side-window     nil
			treemacs-file-event-delay           5000
			treemacs-file-follow-delay          0.2
			treemacs-follow-after-init          t
			treemacs-follow-recenter-distance   0.1
			treemacs-goto-tag-strategy          'refetch-index
			treemacs-indentation                2
			treemacs-indentation-string         " "
			treemacs-is-never-other-window      nil
			treemacs-no-png-images              nil
			treemacs-project-follow-cleanup     nil
			treemacs-persist-file               (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
			treemacs-recenter-after-file-follow nil
			treemacs-recenter-after-tag-follow  nil
			treemacs-show-hidden-files          t
			treemacs-silent-filewatch           nil
			treemacs-silent-refresh             nil
			treemacs-sorting                    'alphabetic-desc
			treemacs-space-between-root-nodes   t
			treemacs-tag-follow-cleanup         t
			treemacs-tag-follow-delay           1.5
			treemacs-width                      35)

	  ;; The default width and height of the icons is 22 pixels. If you are
	  ;; using a Hi-DPI display, uncomment this to double the icon size.
	  ;;(treemacs-resize-icons 44)

	  (treemacs-follow-mode t)
	  (treemacs-filewatch-mode t)
	  (treemacs-fringe-indicator-mode t)
	  (pcase (cons (not (null (executable-find "git")))
				   (not (null (executable-find "python3"))))
		(`(t . t)
		 (treemacs-git-mode 'extended))
		(`(t . _)
		 (treemacs-git-mode 'simple))))
	:bind
	(:map global-map
		  ("M-0"       . treemacs-select-window)
		  ("C-x t 1"   . treemacs-delete-other-windows)
		  ("C-x t t"   . treemacs)
		  ("C-x t B"   . treemacs-bookmark)
		  ("C-x t C-t" . treemacs-find-file)
		  ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-projectile
	:after treemacs projectile
	:ensure t)
#+END_SRC
** Programming
   Packages used for programming

*** General
	Tab width display
#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 4)
#+END_SRC
Auto complete braces
#+BEGIN_SRC emacs-lisp
  (electric-pair-mode t)
#+END_SRC
Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
	:ensure t)
#+END_SRC
Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
	:ensure t
	:init (projectile-mode 1))
#+END_SRC
*** Go
    Golang
#+BEGIN_SRC emacs-lisp
  (use-package go-mode
	:ensure t)

  (use-package company-go
	:ensure t
	:after (company))

  (use-package go-guru
	  :ensure t)

  (use-package go-rename
	:ensure t)

  (use-package flycheck-gometalinter
	:ensure t
	:config
	(flycheck-gometalinter-setup))

  (use-package go-projectile
	:ensure t)

  (defun s/golinter ()
	(setq flycheck-gometalinter-fast t)
	(setq flycheck-gometalinter-deadline "20s")
	(setq flycheck-gometalinter-disable-linters '("golint" "gocyclo")))

  (add-hook 'go-mode-hook
			(lambda ()
			  (s/golinter)
			  (local-set-key (kbd "C-c C-S-j") 'godef-jump-other-window)
			  (unless (getenv "GOPATH") (go-set-project))
			  (setq gofmt-command "goimports")
			  (add-hook 'before-save-hook 'gofmt-before-save)
			  (set (make-local-variable 'company-backends) '(company-go))
			  (company-mode)
			  (go-guru-hl-identifier-mode)
			  (flycheck-mode)))

  ;;(projectile-mode)
  (defun my-switch-project-hook ()
	(go-set-project))
  (add-hook 'projectile-after-switch-project-hook #'my-switch-project-hook)
#+END_SRC

**** Unused Packages

	 These are the packages that I'm not using at the moment.
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package go-eldoc
	:ensure t)
  (add-hook 'go-mode-hook 'go-eldoc-setup)
#+END_SRC

*** Javascript
	js2-mode
#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
	:ensure t
	:init
	(add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode)))
#+END_SRC
* Looks

*** Annoying things
#+BEGIN_SRC emacs-lisp
  ;; Disable the bell sound
  (setq ring-bell-function 'ignore)
  ;; Disable startup screen
  (setq inhibit-startup-screen t)
  ;; Terminal window divider prettify
   (set-display-table-slot standard-display-table 5 ?â”‚)
#+END_SRC

*** Simplify
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode 0)
  (when window-system
    (tool-bar-mode 0)
    (scroll-bar-mode 0))
#+END_SRC

*** Misc
    
#+BEGIN_SRC emacs-lisp
  ;; Always highlight current line.
  (global-hl-line-mode t)

  ;; Prettify some characters. I might actually remove this.
  (global-prettify-symbols-mode t)
#+END_SRC

*** Backup files
    Store backup files in a directory. Note that I do not have a function to create the directory =~/.emacs.d/emacs-backup=.
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("" . "~/.emacs.d/emacs-backup")))
#+END_SRC


